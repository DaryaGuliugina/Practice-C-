#include <iostream>
#include <cmath>
using namespace std;

const int SIZE1 = 5;
const int SIZE2 = 4;
/*
Задание 1
Реализуйте шаблонные функции для поиска максимума,
минимума, сортировки двумерного массива
(Быстрая сортировка / Quicksort),
двоичного поиска в массиве, замены элемента
массива на переданное значение.
*/

template <typename T> void initArray(T(*arr)[SIZE2]);
template <typename T> void showArray(T(*arr)[SIZE2]);
template <typename T> T searchMax(T(*arr)[SIZE2]);
template <typename T> T searchMin(T(*arr)[SIZE2]);
template <typename T> void changeElement(T(*arr)[SIZE2]);
template <typename T> void qsortRecursive(T* mas, int size);
template <typename T> void qsord2DArray(T(*arr)[SIZE2]);
template <typename T> void binarySearch(T(*arr1)[SIZE2], T key);
template <typename T> void binarySearch2(T(*arr)[SIZE2], T key);


int main()
{
    int arr[SIZE1][SIZE2];
    int key{ 24 };
    initArray(arr);
    cout << "Source array" << endl;
    showArray(arr);
    qsord2DArray(arr);
    cout << endl << "Sorted array" << endl;
    showArray(arr);
    binarySearch2(arr, key);
    cout << "\nMax = " << searchMax(arr) << endl;
    cout << "Min = " << searchMin(arr) << endl;
    changeElement(arr);
    showArray(arr);
}

template <typename T>
void initArray(T(*arr)[SIZE2]) {
    for (int i{}; i < SIZE1; i++) {
        for (int j{}; j < SIZE2; j++) {
            arr[i][j] = static_cast <T> (rand()) / static_cast <T> (RAND_MAX / 50);
        }
    }
}

template <typename T>
void showArray(T(*arr)[SIZE2]) {
    for (int i{}; i < SIZE1; i++) {
        for (int j{}; j < SIZE2; j++) {
            cout << arr[i][j] << "\t";
        }
        cout << endl;
    }
}

template <typename T>
T searchMax(T(*arr)[SIZE2]) {
    T max = arr[0][0];
    for (int i{}; i < SIZE1; i++) {
        for (int j{}; j < SIZE2; j++) {
            if (arr[i][j] > max) max = arr[i][j];
        }
    }
    return max;
}

template <typename T>
T searchMin(T(*arr)[SIZE2]) {
    T min = arr[0][0];
    for (int i{}; i < SIZE1; i++) {
        for (int j{}; j < SIZE2; j++) {
            if (arr[i][j] < min) min = arr[i][j];
        }
    }
    return min;
}

template <typename T>
void changeElement(T(*arr)[SIZE2]) {
    int index1{}, index2{};
    T number{};
    cout << "Enter the array index 1: ";
    cin >> index1;
    cout << "Enter the array index 2: ";
    cin >> index2;
    cout << "Enter the number to replace: ";
    cin >> number;
    arr[index1][index2] = number;
}

template <typename T>
void qsortRecursive(T* arr, int size) {
    int i = 0;
    int j = size - 1;
    T mid = arr[size / 2];

    do {
        while (arr[i] < mid) { i++; }
        while (arr[j] > mid) { j--; }
        if (i <= j) {
            T tmp = arr[i];
            arr[i] = arr[j];
            arr[j] = tmp;
            i++;
            j--;
        }
    } while (i <= j);

    if (j > 0) { qsortRecursive(arr, j + 1); }
    if (i < size) { qsortRecursive(&arr[i], size - i); }
}

template <typename T>
void qsord2DArray(T(*arr)[SIZE2]) {
    T arr1[SIZE1 * SIZE2];
    int k{ 0 }, m{ 0 };
    for (int i{}; i < SIZE1 * SIZE2; i++) {
        if (k == SIZE2) { k = 0; m++; }
        arr1[i] = arr[m][k];
        k++;
    }
    qsortRecursive(arr1, SIZE1 * SIZE2);
    int l{};
    for (int i{}; i < SIZE1; i++) {
        for (int j{}; j < SIZE2; j++) {
            arr[i][j] = arr1[l];
            l++;
        }
    }
}
// version 2
template <typename T>
void binarySearch2(T(*arr)[SIZE2], T key) {
    int arr1[SIZE1 * SIZE2];
    int k{ 0 }, m{ 0 };
    for (int i{}; i < SIZE1 * SIZE2; i++) {
        if (k == SIZE2) { k = 0; m++; }
        arr1[i] = arr[m][k];
        k++;
    }
    bool flag = false;
    int l = 0;
    int r = SIZE1 * SIZE2;
    int mid;
    while ((l <= r) && (flag != true)) {
        mid = (l + r) / 2;
        if (arr1[mid] == key) flag = true;
        if (arr1[mid] > key) r = mid - 1;
        else l = mid + 1;
    }
    int index1 = mid / SIZE2;
    int index2 = mid % SIZE2;
    if (flag) cout << "\nIndex of element " << key << " in the array: " << "[" << index1 << "]" << "[" << index2 << "]";
    else cout << "\nThere is no such element in the array.";
}
// version 1
template <typename T>
void binarySearch(T(*arr1)[SIZE2], T key) {
    double N{ pow(2, SIZE1) };
    bool flag = false;
    int l1{ 0 }, l2{ 0 }, r1{ 2 }, r2{ 2 }, mid1{}, mid2{};
    for (int i{}; i < SIZE1; i++) {
        if (arr1[i][SIZE2 - 1] == key) { flag = true; mid1 = i; mid2 = SIZE2 - 1; }
    }
    while ((N >= 0) && (flag != true)) {
        mid1 = (l1 + r1) / 2;
        mid2 = (l2 + r2) / 2;
        if (arr1[mid1][mid2] == key) { flag = true; }
        if (arr1[mid1][mid2] > key) {
            if (r2 == 0) {
                r1 -= 1;
                r2 = SIZE1 - 1;
            }
            else { r2 -= 1; }
        }
        else {
            if (r2 == SIZE1 - 1) {
                r1 += 1;
                r2 = 0;
            }
            else { r2 += 1; }
        }
        N--;
    }
    if (flag) cout << "\nIndex of element " << key << " in the array: " << "[" << mid1 << "]" << "[" << mid2 << "]";
    else cout << "\nThere is no such element in the array.";
}